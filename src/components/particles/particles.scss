
$bubble-count: 40;
$sway-type: "sway-left-to-right", "sway-right-to-left";

@function random_range($min, $max) {
  $rand: random();
  $random_range: $min + floor($rand * (($max - $min) + 1));
  @return $random_range;
}

@function sample($list) {
  @return nth($list, random(length($list)));
}

.bubbles {
  z-index: -1;
  position: absolute;
  top: 0;
  width: 100%;
  height: 100%;
  margin-bottom: -100vh;
}

.bubbles-container{
  position: relative;
  width: 100%;
  height: 100%;
  overflow: hidden;
}

.bubble {
  position: absolute;
  opacity: 0;
  left: var(--bubble-left-offset);
  display: block;
  width: var(--bubble-radius);
  height: var(--bubble-radius);
  border-radius: 50%;
  animation: float-up var(--bubble-float-duration) var(--bubble-float-delay) ease-in infinite;

  &::before {
    position: absolute;
    content: '';
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
    background: rgba(var(--blue), 0.4);
    border-radius: inherit;
    animation: var(--bubble-sway-type) var(--bubble-sway-duration) var(--bubble-sway-delay) ease-in-out alternate infinite;
  }

  @for $i from 0 through $bubble-count {
    &:nth-child(#{$i}) {
      --bubble-left-offset: #{random_range(0vw, 100vw)};
      --bubble-radius: #{random_range(2vw, 12vw)};
      --bubble-float-duration: #{random_range(10s, 20s)};
      --bubble-sway-duration: #{random_range(4s, 6s)};
      --bubble-float-delay: #{random_range(0s, 4s)};
      --bubble-sway-delay: #{random_range(0s, 4s)};
      --bubble-sway-type: #{sample($sway-type)};
    }
  }
}



@keyframes float-up {
  0%{
    opacity: 0;
  }
  10%{
    opacity: 0.6;
  }
  50%{
    opacity: 0.6;
  }
  100% {
    transform: translateY(-450%);
    opacity: 0;
  }
}

@keyframes sway-left-to-right {

  to {
    transform: translateX(100%);
  }
}

@keyframes sway-right-to-left {


  to {
    transform: translateX(-100%);
  }
}